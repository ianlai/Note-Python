class Solution:
    
    # [4] Tabulation DP with rolling array [space=O(N), 95%, time=O(M*N), 72%]
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        print("Tabulation DP (with rolling array)")
        M, N = len(text1), len(text2)
        
        # dp = [[0 for j in range(N + 1)] for i in range(2)] #ok (matrix of 2 * N+1)
        dp = [[0] * (N+1), [0] * (N+1) ] #ok (matrix of 2 * N+1)
        
        for i in range(M-1, -1, -1):
            for j in range(N-1, -1, -1):
                if text1[i] == text2[j]:
                    dp[i%2][j] = 1 + dp[(i+1)%2][j+1]
                else:
                    dp[i%2][j] = max(dp[(i+1)%2][j], dp[i%2][j+1])
        return dp[0][0]
    
    # ==============================================

    # [3] Tabulation DP [space=O(M*N), 38%, time=O(M*N), 76%]
    def longestCommonSubsequence1(self, text1: str, text2: str) -> int:
        print("Tabulation DP (with 2D matrix)")
        M, N = len(text1), len(text2)
        dp = [[0 for j in range(N + 1)] for i in range(M + 1)]
        
        for i in range(M-1, -1, -1):
            for j in range(N-1, -1, -1):
                if text1[i] == text2[j]:
                    dp[i][j] = 1 + dp[i+1][j+1]
                else:
                    dp[i][j] = max(dp[i+1][j], dp[i][j+1])
        return dp[0][0]
    
    # ==============================================
    
    # [2] Memoization DP with O(1) time subproblem [space=O(M*N), time=O(M*N), 9%]
    def longestCommonSubsequence1(self, text1: str, text2: str) -> int:
        print("Memoization DP 2")
        memo = {}
        def helper(p1, p2):
            if p1 == len(text1) or p2 == len(text2):
                return 0
            if (p1, p2) in memo:
                return memo[(p1, p2)]
            
            ans = 0 
            if text1[p1] == text2[p2]:  #solve one subproblem: O(1)
                cur0 = 1 + helper(p1+1, p2+1)  
                ans = cur0
            else:
                cur1 = helper(p1+1, p2)  
                cur2 = helper(p1, p2+1)
                ans = max(cur1, cur2)
                
            memo[(p1, p2)] = ans
            return ans
        return helper(0, 0)
    
    # ==============================================
    
    # [1] Memoization DP with O(N) time subproblem [space=O(M*N), time=O(M*N2), 5%]
    def longestCommonSubsequence1(self, text1: str, text2: str) -> int:
        print("Memoization DP 1")
        memo = {}
        def helper(p1, p2):
            if p1 == len(text1) or p2 == len(text2):
                return 0
            if (p1, p2) in memo:
                return memo[(p1, p2)]
            
            cur1 = helper(p1+1, p2)  #skip text1[p1]
            cur2 = 0                 #use text1[p1]
            firstOccurence = text2.find(text1[p1], p2)  #solve one subproblem: O(N)
            if firstOccurence != -1: #found
                cur2 = 1 + helper(p1+1, firstOccurence+1)
            ans = max(cur1, cur2)
            memo[(p1, p2)] = ans
            return ans
        return helper(0, 0)
    
    # ==============================================
    
    # Brute-force (no memoization )
    def longestCommonSubsequence1(self, text1: str, text2: str) -> int:
        def helper(p1, p2):
            if p1 == len(text1) or p2 == len(text2):
                return 0
                        
            cur1 = helper(p1+1, p2)  #skip text1[p1]
            cur2 = 0                 #use text1[p1]
            firstOccurence = text2.find(text1[p1], p2)
            if firstOccurence != -1: #found
                cur2 = 1 + helper(p1+1, firstOccurence+1)
            ans = max(cur1, cur2)
            return ans
    
        return helper(0, 0)
    
    # ==============================================
    
    # Brute-force 
    def longestCommonSubsequence2(self, text1: str, text2: str) -> int:
        if not text1 or not text2:
            return 0
        ans = 0 
        
        for i in range(len(text1)):
            cur = 0 
            for j in range(len(text2)):
                if text1[i] == text2[j]:
                    cur = max(cur, 1 + self.longestCommonSubsequence(text1[i+1:], text2[j+1:]))
                else:
                    cur = max(cur, self.longestCommonSubsequence(text1, text2[j+1:]))
            ans = max(ans, cur)
        return ans
                    
                    
                